swagger: '2.0'
info:
  description: Server to manage events for Beevy
  version: 1.0.0
  title: Beevy App
tags:
  - name: event
    description: Create and get events
parameters:
  userID:
    name: userID
    in: path
    description: ID of a User
    required: true
    type: string
  username:
    name: username
    in: path
    description: username
    required: true
    type: string
  tempAccessToken:
    name: tempAccessToken
    in: path
    description: tempAccessToken
    required: true
    type: string
paths:
  /user:
    post:
      tags:
        - user
      summary:  Create user if not existent
      description: Create user if not existent
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User Object
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Created user
        '405':
          description: Failed to create user
  /user/register:
    post:
      tags:
        - user
      summary: Register user
      description: Register a user via mail
      operationId: registerUser
      consumes:
          - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Minimal User
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Send registration mail
        '405':
          description: Failed to send registration mail
  /user/access:
    post:
      tags:
        - user
      summary: Set a temporary access token for a user
      description: Set a temporary access token to make sure only the right user can get data
      operationId: setTempAccessTokenForUser
      consumes:
          - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Security Object
          schema:
            $ref: '#/definitions/UserSecurity'
      responses:
        '201':
          description: Saved temporary access token
        '405':
          description: Failed to create temporary access token
  /user/{username}/{userID}/{tempAccessToken}:
    parameters:
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/userID'
      - $ref: '#/parameters/tempAccessToken'
    get:
      tags:
        - user
      summary: Return security token for a user
      description: Get security token
      operationId: getUserToken
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: string
        '404':
          description: User not found
  /event:
    get:
      tags:
        - event
      summary: Get all events that are available
      description: Get Events
      operationId: getEvents
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        '400':
          description: Failed to get events
  /event/create:
    post:
      tags:
        - event
      summary: Create an event
      description: Create an event for Beevy
      operationId: createEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Event Object
          schema:
            $ref: '#/definitions/Event'
      responses:
        '201':
          description: Created event
        '401':
          description: Unauthorized
        '405':
          description: Failed to create event
  /event/join:
    post:
      tags:
        - event
      summary: Join an event
      description: Join an existing event
      operationId: joinEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Join Event Data
          schema:
            $ref: '#/definitions/JoinEventData'
      responses:
        '201':
          description: Joined event
        '405':
          description: Failed to join event
  /event/{userID}/{tempAccessToken}:
      parameters:
        - $ref: '#/parameters/userID'
        - $ref: '#/parameters/tempAccessToken'
      get:
        tags:
          - event
        summary: Return a users events
        description: Get events of a user
        operationId: getUserEvents
        produces:
          - application/json
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/definitions/UserEvents'
          '405':
            description: Failed to get events
  /comment:
    post:
      tags:
        - comment
      summary: Add a comment
      description: Add a comment to an event or another comment
      operationId: addComment
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Comment Data
          schema:
            $ref: '#/definitions/CommentDTO'
      responses:
        '201':
          description: Added comment
        '405':
          description: Failed to add comment
definitions:
  Event:
    type: object
    properties:
      eventID:
        type: string
      admin:
        $ref: '#/definitions/MinimalUser'
      title:
        type: string
      summary:
        type: string
      description:
        type: string
      type:
        type: string
        enum:
          - project
          - activity
          - hangout
      date:
        type: string
      endDate:
        type: string
      address:
        $ref: '#/definitions/Address'
      registeredMembers:
        type: array
        items:
          type: string
      possibleMemberCount:
        type: integer
      currentMemberCount:
        type: integer
  Address:
    type: object
    properties:
      street:
        type: string
      zip:
        type: integer
      city:
        type: string
      joinedEvents:
        type: array
        items:
          type: string
      createdEvents:
        type: array
        items:
          type: string
  MinimalUser:
    type: object
    properties:
      username:
        type: string
      userID:
        type: string
      token:
        type: string
  User:
    type: object
    properties:
      username:
        type: string
      userID:
        type: string
      mail:
        type: string
      token:
        type: string
      tempAccessToken:
        type: string
      joinedEvents:
        type: array
        items:
          type: string
      createdEvents:
        type: array
        items:
          type: string
  UserSecurity:
    type: object
    properties:
      username:
        type: string
      userID:
        type: string
      tempToken:
        type: string
  JoinEventData:
    type: object
    properties:
      userID:
        type: string
      token:
        type: string
      eventID:
        type: string
  UserEvents:
    type: object
    properties:
      joinedEvents:
        type: array
        items:
          $ref: '#/definitions/Event'
      createdEvents:
        type: array
        items:
          $ref: '#/definitions/Event'
  CommentDTO:
    type: object
    properties:
      userID:
        type: string
      userToken:
        type: string
      eventID:
        type: string
      repliedTo:
        type: string
      commentBody:
        type: string
      commentTime:
        type: string