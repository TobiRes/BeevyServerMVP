/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.beevy.api;

import com.beevy.model.EventResource;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-03-26T15:37:57.761+02:00")

@Api(value = "event", description = "the event API")
public interface EventApi {

    Logger log = LoggerFactory.getLogger(EventApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Create an event", nickname = "createEvent", notes = "Create an event for Beevy", tags={ "event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created event"),
        @ApiResponse(code = 405, message = "Failed to create event") })
    @RequestMapping(value = "/event/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createEvent(@ApiParam(value = "Event Object"  )  @Valid @RequestBody EventResource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get all events that are available", nickname = "getEvents", notes = "Get Events", response = EventResource.class, responseContainer = "List", tags={ "event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EventResource.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Failed to get events") })
    @RequestMapping(value = "/event",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<EventResource>> getEvents() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"userSecret\" : \"userSecret\",  \"memberCount\" : 0,  \"description\" : \"description\",  \"location\" : {    \"zip\" : 6,    \"city\" : \"city\",    \"street\" : \"street\"  },  \"time\" : \"time\",  \"title\" : \"title\",  \"category\" : \"category1\",  \"userID\" : \"userID\"}, {  \"userSecret\" : \"userSecret\",  \"memberCount\" : 0,  \"description\" : \"description\",  \"location\" : {    \"zip\" : 6,    \"city\" : \"city\",    \"street\" : \"street\"  },  \"time\" : \"time\",  \"title\" : \"title\",  \"category\" : \"category1\",  \"userID\" : \"userID\"} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
